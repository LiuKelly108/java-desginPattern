一、总结每种单例写法的优、缺点。
单例模式分为以5种：
（1）饿汉式（不管是否需要使用，都进行实例化）
优点：保证线程安全
缺点：可能将不需要的对象进行实例化，则会浪费空间。
（2）懒汉式（只有在使用的时候，才被实例化）
优点：不会造成空间的浪费
缺点：使用synchronized 导致性能降低
（3）注册式 （将单例存放在一个容器或摸个地方，用唯一标识获取）
优点：不能被反射、序列化反序列化进行破坏
eg . enum方法单例、容器式单例

二、思考破坏单例模式的方式有哪些？并且归纳总结。
破坏单例模式的方法由2种：
（1）反射的方法
    通过反射的方法，获取对象的构造方法，通过构造方法创建实例。该创建的实例并非是单例的。
 可通过在单例对象的构造方法中判断该实例对象是否已经被生成，如果生成则抛出异常避免反射使用再次创建单例。
（2）序列和反序列化
    通过将对象进行序列化（转换成能够传输或存储的物质），然后将该物质再进行反序列化（能够将传输或存储的物质转换成对象），
获得原对象的实例。但是新生成的实例并非单例。因此可通过在单例对象的类中重写 readResolve()方法，返回原来的实例（但是
实际上实例化了2次）

三、梳理内部的类的执行逻辑，并画出时序图
例如com.kellystudy.pattern.singleton.lazy.LazyInnerClassSingleton的实例创建调用内部类：
  LazyInnerClassSingleton lazyInnerClassSingleton = LazyInnerClassSingleton.getInstance();
以上：
（1）当调用 LazyInnerClassSingleton.getInstance() 时候，jvm初始化LazyHolder类
（2）因为getInstance()的调用方法实际为LazyHolder.LAZY，JVM然后实例化LazyInnerClassSingleton，
并将引用为LAZY。
（3）LazyInnerClassSingleton.getInstance()最后获得了LAZY的对应的实例对象

LazyHolder.LAZY ：
    初始化LazyHolder —>实例化LazyInnerClassSingleton后，并将其赋值给一个常量的引用LAZY
